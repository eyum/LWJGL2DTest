import java.io.File;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import static org.lwjgl.stb.STBImage.*;
import static org.lwjgl.opengl.GL42.*;
import org.lwjgl.system.MemoryStack;

import virassan.states.Handler;

public class Texture {

	private int id, width, height;
	
	public Texture(String filename) throws Exception{
		loadTexture(filename, null);
	}
	
	public Texture(ByteBuffer imageBuffer) throws Exception{
		loadTexture(null, imageBuffer);
	}
	
	private void loadTexture(String filename, ByteBuffer buf) throws Exception{
		
		//load texture file
		try(MemoryStack stack = MemoryStack.stackPush()) {
			IntBuffer w = stack.mallocInt(1);
			IntBuffer h = stack.mallocInt(1);
			IntBuffer channels = stack.mallocInt(1);
			
			if(filename != null) {
				File file = new File(filename);
				if(!file.isFile()) {
					Handler.errorLog.addErrorToLog("File " + filename + " is not a file.");
				}
				String filePath = file.getAbsolutePath();
				buf = stbi_load(filePath, w, h, channels, 4); //loads the image
			}else {
				buf = stbi_load_from_memory(buf, w, h, channels, 4);
			}
			if(buf ==  null) {
				throw new Exception("Image File not loaded: " + stbi_failure_reason());
			}
			
			//get the width and height of the image
			width = w.get();
			height = h.get();
		}
		this.id = createTexture(buf);
		stbi_image_free(buf);
		
	}
	
	private int createTexture(ByteBuffer buf) {
		//create a new opengl texture
		int textureID = glGenTextures();
		
		//bind the texture
		glBindTexture(GL_TEXTURE_2D, textureID);
		
		//tell opengl how to unpack the RGBA bytes. each component is 1 byte size
		glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
		
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		
		//upload the texture data
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, buf);
		
		//generate mip map
		glGenerateMipmap(GL_TEXTURE_2D);
		return textureID;
	}
	
  public int getID() { return id; }
	public float getWidth() { return width; }
	public float getHeight() { return height; }
	
	public void cleanup() {
		glDeleteTextures(id);
	}
}
