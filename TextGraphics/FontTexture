import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import virassan.states.Handler;

public class FontTexture {

	private static final String IMAGE_FORMAT = "png";
	private static final Font DEFAULT_FONT = new Font("Arial", Font.PLAIN, 20);
	private static final String DEFAULT_CHARSET = "ISO-8859-1";
	
	private final Font font;
	private final String charSetName;
	private final Map<Character, CharInfo> charMap = new HashMap<>();;
	private Texture texture;
	private int height, width;
	
	public FontTexture() {
		this(DEFAULT_FONT, DEFAULT_CHARSET);
	}
	
	public FontTexture(Font font, String charSetName) {
		this.font = font;
		this.charSetName = charSetName;
		try {
			buildTexture();
		} catch (Exception e) {
			String mesg = "FontTexture.constructor failed to build texture. " + e.getMessage();
			Handler.errorLog.addErrorToLog(mesg);
		}
	}
	
	private String getAllAvailableChars(String charsetName) {
		CharsetEncoder ce = Charset.forName(charsetName).newEncoder();
		StringBuilder result = new StringBuilder();
		for(char c = 0; c < Character.MAX_VALUE; c++) {
			if(ce.canEncode(c)) {
				result.append(c);
			}
		}
		return result.toString();
	}
	
	private void buildTexture() throws Exception {
		//get the font metrics for each character for the selected font by using image
		BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
		
		// Create a Graphics2D rendering object to get the fontMetrics for 
		// all available characters and then dispose of the Graphics2D
		// The Graphics2D is disposed of because the BufferedImage created
		// for this task is not the width and height needed
		Graphics2D g2D = img.createGraphics();
		g2D.setFont(font);
		FontMetrics fontMetrics = g2D.getFontMetrics();
		String allChars = getAllAvailableChars(charSetName);
		this.width = 0;
		this.height = 0;
		for(char c : allChars.toCharArray()) {
			//get the size for each char and update global image size
			CharInfo charInfo = new CharInfo(width, fontMetrics.charWidth(c));
			charMap.put(c, charInfo);
			width += charInfo.getWidth();
			height = Math.max(height, fontMetrics.getHeight());
		}
		g2D.dispose();
		
		// Create a new BufferedImage with height = max character height
		// and the width = sum of all available characters' width
		img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		g2D = img.createGraphics();
		g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2D.setFont(font);
		fontMetrics = g2D.getFontMetrics();
		g2D.setColor(Color.WHITE);
		
		// Draw the String of all available characters
		// TODO: certain characters - only know of lowercase i and g so far - have artifacts
		// i has an artifact beflow and g has one above, maybe this line is the cause?
		g2D.drawString(allChars, 0, fontMetrics.getAscent());
		g2D.dispose();
		
		// Write BufferedImage to a ByteBuffer
		ByteBuffer buf = null;
		try(ByteArrayOutputStream out = new ByteArrayOutputStream()){
			ImageIO.write(img, IMAGE_FORMAT, out);
			out.flush();
			byte[] data = out.toByteArray();
			buf = ByteBuffer.allocateDirect(data.length);
			buf.put(data, 0, data.length);
			buf.flip();
		}
		// Create a new texture object from the ByteBuffer
		texture = new Texture(buf);
	}
	
	public void cleanup() {
		texture.cleanup();
	}
	
	public CharInfo getCharInfo(char c) {
		return charMap.get(c);
	}
	public Texture getTexture() { return texture; }
	public int getWidth() { return width; }
	public int getHeight() { return height; }
	
	public static class CharInfo{
		private final int startX;
		private final int width;
		
		public CharInfo(int startX, int width) {
			this.startX = startX;
			this.width = width;
		}
		
		public int getStartX() { return startX; }
		public int getWidth() { return width; }
		
	}
}
